AWSTemplateFormatVersion: '2010-09-09'
Description: 'Provides Lambda execution roles for ingest and processing of data for a system'

Parameters:

  SourceSystemName:
    Type: String
    Description: 'The name of the source system to ingest (3-15 lowercase characters)'
    AllowedPattern: '^[a-z]{3,15}$'

  StageName:
    Type: String
    AllowedValues:
      - dev
      - test
      - prod
    Description: 'The stage of deployment'

Resources:

  InputLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${StageName}-input-${SourceSystemName}-role'
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Ref InputLambdaCloudWatchPolicy
        - !Ref InputLambdaS3Policy
        - !Ref InputLambdaKMSPolicy
        - !Ref InputLambdaSQSPolicy

  ProcessedLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Sub '${StageName}-processed-${SourceSystemName}-role'
        Path: /
        AssumeRolePolicyDocument:
          Statement:
            - Action:
              - sts:AssumeRole
              Effect: Allow
              Principal:
                Service:
                - lambda.amazonaws.com
          Version: 2012-10-17
        ManagedPolicyArns:
          - !Ref ProcessedLambdaCloudWatchPolicy
          - !Ref ProcessedLambdaS3Policy
          - !Ref ProcessedLambdaKMSPolicy
          - !Ref ProcessedLambdaSQSPolicy

  InputLambdaCloudWatchPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${StageName}-input-${SourceSystemName}-cloudwatch-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowLambdaToCreateLogStreamAndPut'
            Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*'
          - Sid: 'AllowLambdaToCreateLogGroups'
            Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'

  InputLambdaS3Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${StageName}-input-${SourceSystemName}-s3-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowReadFromInputBucket'
            Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - !Sub 'arn:aws:s3:::${StageName}-input-${SourceSystemName}-${AWS::AccountId}'
              - !Sub 'arn:aws:s3:::${StageName}-input-${SourceSystemName}-${AWS::AccountId}/*'
          - Sid: 'AllowWriteToProcessedBucket'
            Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:AbortMultipartUpload'
            Resource:
              - !Sub 'arn:aws:s3:::${StageName}-processed-${SourceSystemName}-${AWS::AccountId}'
              - !Sub 'arn:aws:s3:::${StageName}-processed-${SourceSystemName}-${AWS::AccountId}/*'

  InputLambdaKMSPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${StageName}-input-${SourceSystemName}-kms-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowDecryptFromInputBucket'
            Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource:
              Fn::ImportValue:
                !Sub '${StageName}-${SourceSystemName}-kms-input-key-arn'
          - Sid: 'AllowEncryptToProcessedBucket'
            Effect: Allow
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource:
              Fn::ImportValue:
                !Sub '${StageName}-${SourceSystemName}-kms-processed-key-arn'

  InputLambdaSQSPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${StageName}-input-${SourceSystemName}-sqs-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowSQSInput'
            Effect: Allow
            Action:
              - 'sqs:ReceiveMessage'
              - 'sqs:DeleteMessage'
              - 'sqs:GetQueueAttributes'
            Resource: !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${StageName}-input-${SourceSystemName}-queue'

  ProcessedLambdaCloudWatchPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${StageName}-processed-${SourceSystemName}-cloudwatch-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowLambdaToCreateLogStreamAndPut'
            Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*'
          - Sid: 'AllowLambdaToCreateLogGroups'
            Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'

  ProcessedLambdaS3Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${StageName}-processed-${SourceSystemName}-s3-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowReadFromProcessedBucket'
            Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - !Sub 'arn:aws:s3:::${StageName}-processed-${SourceSystemName}-${AWS::AccountId}'
              - !Sub 'arn:aws:s3:::${StageName}-processed-${SourceSystemName}-${AWS::AccountId}/*'

  ProcessedLambdaKMSPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${StageName}-processed-${SourceSystemName}-kms-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowDecryptFromProcessedBucket'
            Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource:
              Fn::ImportValue:
                !Sub '${StageName}-${SourceSystemName}-kms-processed-key-arn'

  ProcessedLambdaSQSPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${StageName}-processed-${SourceSystemName}-sqs-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowSQSInput'
            Effect: Allow
            Action:
              - 'sqs:ReceiveMessage'
              - 'sqs:DeleteMessage'
              - 'sqs:GetQueueAttributes'
            Resource: !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${StageName}-processed-${SourceSystemName}-queue'

Outputs:

  InputLambdaRoleArn:
    Description: 'The ARN of the input Lambda Role'
    Value: !GetAtt 'InputLambdaRole.Arn'
    Export:
      Name: !Sub "${StageName}-${SourceSystemName}-input-lambda-role-arn"

  ProcessedLambdaRoleArn:
    Description: 'The ARN of the processed Lambda Role'
    Value: !GetAtt 'ProcessedLambdaRole.Arn'
    Export:
      Name: !Sub "${StageName}-${SourceSystemName}-processed-lambda-role-arn"